name: "CI: Unit & Integration Tests"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    name: "ðŸ§ª Unit Tests"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Download modules
        run: go mod download

      - name: Run unit tests
        run: go test ./internal/... ./pkg/... -v -cover

  integration-tests:
    name: "ðŸ”— Integration Tests"
    needs: unit-tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: moviedb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: alexkoba
        options: >-
          --health-cmd pg_isready -U postgres
          --health-interval 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Create .env for Docker
        run: |
          echo "PORT=8080"                        > .env
          echo "DB_URL=postgres://postgres:alexkoba@postgres:5432/moviedb?sslmode=disable" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}"  >> .env
          echo "KINOPOISK_API_KEY=${{ secrets.KINOPOISK_API_KEY }}" >> .env
          echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> .env

      - name: Build and start API
        run: |
          docker-compose down -v
          docker-compose build api builder
          docker-compose up -d postgres api

      - name: Wait for API healthy
        run: |
          until curl -f http://localhost:8080/movies?page=1&size=1; do
            echo "Waiting for API..."
            sleep 2
          done

      - name: Run integration tests
        env:
          API_URL: http://localhost:8080
        run: |
          docker-compose run --rm builder
